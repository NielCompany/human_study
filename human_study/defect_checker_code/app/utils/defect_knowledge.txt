[한 줄 요약]
하자 사진을 찍기만 하면, 자동으로 문제 설명 + 위치 강조 + 리포트까지 만들어주는 최초의 AI 앱

[프로젝트 목표]
- 하자 점검 사진을 기반으로 하자 설명을 자동으로 생성하는 AI 시스템 개발
- 딥러닝 기반 Image-to-Caption 모델 학습을 최종 목표로 설정

[활용 사례]
- 입주자용 하자 점검 앱
- 시공사 품질 점검 자동화
- 감리/감사용 보고서 생성 자동화

[타사 시스템과의 비교]
접근성: 기존 시스템은 사내 전용 / 우리 시스템은 누구나 사용 가능한 B2C 앱
입력 방식: 기존 시스템은 텍스트 입력 / 우리 시스템은 사진만 찍으면 자동 분석
하자 위치 표시: 기존 없음 / 우리 시스템은 박스 및 영역 시각적 강조
하자 설명: 기존 자동화 문장 제한적 / 우리 시스템은 OCR + Gemini + Caption 기반 설명
리포트 생성: 기존 없음 / 우리 시스템은 PDF 자동 생성
확장성: 기존 사전 고정 모델 / 우리 시스템은 데이터 축적형 진화 가능
고객 친화도: 기존 고객 직접 사용 불가 / 우리 시스템은 스마트폰으로 누구나 사용 가능
모델 유연성: 기존 블랙박스 / 우리 시스템은 fine-tuning 및 오픈소스 활용 가능

[개발 흐름 요약]
1. 이미지 16,742장 리네이밍 (image00001.jpg 형식)
2. OCR 테스트: EasyOCR, PaddleOCR, Tesseract → CLOVA 선택
3. OCR JSON → 내용만 추출한 .txt 저장
4. 위치 단어(정면, 좌측 등) 제거
5. Gemini API로 텍스트 정제 및 교정
6. 72개 클래스 자동 추출
7. ResNet34 모델 학습 (정확도 0.73)
8. 유사 클래스 병합 → 23개 클래스
9. 비율 유지한 이미지 Resize 적용
10. EarlyStopping 제거 (불필요 판단)
11. ResNet50 학습 (정확도 0.7898)
12. 텍스트 제거 실험 → 성능 저하로 제외
13. YOLOv5 수동 라벨링 학습 (2,000장)
14. Colab GPU → 개인 노트북 GPU로 전환
15. 전체 이미지 YOLOv5 라벨링
16. 박스 기반 이미지로 ResNet50 재학습
17. 원본 + 박스 이미지로 최종 학습 완료

[실험 제외 사항]
- OCR 텍스트 제거 후 성능 하락 (Accuracy 약 0.48)
- 판별에 중요한 단서 손실로 제외 결정

[모델 구조]
1차 모델: ResNet50 + Linear → 전체 이미지 기반 → 23클래스 분류 (정확도 0.7898)
2차 모델: YOLOv5 검출 후 해당 박스만 크롭하여 ResNet50 재학습 중 → 더 정밀한 분류 목표



[향후 계획]
- 박스 기반 모델 성능 비교
- 캡션 기반이 아닌 클래스 분류 분기 실험
- 사용자 입력 이미지 → 박스 검출 → 설명 생성 → 리포트 출력까지 연동
- Flask 웹 앱 형태로 배포하여 상용화 가능성 검토

[팀원]
Human Study HangOver Team 진행 
-팀장 : 박준혁
-팀원 : 이유정 